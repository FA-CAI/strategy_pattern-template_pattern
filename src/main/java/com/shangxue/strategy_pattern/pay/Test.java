package com.shangxue.strategy_pattern.pay;

import com.shangxue.strategy_pattern.pay.payport.AliPay;

//策略模式
public class Test {

    public static void main(String[] args) {
        //省略把商品添加到购物车，再从购物车下单
        //直接从点单开始
        Order order=new Order("1","2019112201000009",800);

        //开始支付，选择微信支付、支付宝、银联卡、京东白条、财付通
        //每个渠道它支付的具体算法是不一样的
        //基本算法固定的
       // System.out.println(order.pay(new AliPay()));  //客户程序员需要new一个支付类，这个不科学，不好用       类似前端思想“能让用户选的，不要让他填（用户什么奇葩都有，他们会填错，会导致各种意外bug。故何必你知道却还给维护增加麻烦呢(故意？)）”
        //改造 成 入参放一个常量 （有点该搞成枚举的感觉（但是他是放Payment接口里写）。但没单例。）  //也不够好。他改成枚举，高扩展，高可用  变成维护枚举类PayType
        //枚举，解决了不需要switch，也不需要if else   在用户调用方法之前就已经选择好了         //咋有点工厂模式的味道（但的确设计模式只是经验，是活学活用，是结合着用的。不能生搬硬套、强行用，会把简单搞复杂）
        //这个值是在支付的时候才决定用哪个值

        //应用场景：比如，集合用比较器(ArrayList Comparator compare)，有默认但你可以自己写，这就算一条策略（一个固定的算法）
                  //Spring中有各种BeanFactory我们可以根据用户配置，选择用哪种工厂（ME：面向接口编程的味道，有内味儿了~）。（和抽象工厂模式结合用的）
                   //爬虫parser根据url选择，不同网站有不同的parser策略（算法。但百度下，算法不可再变，得固定）


        //这个人的写法是  （这鸟人好像就是用接口而没有换枚举类。好蛋疼哦，他怎么听课的！）  //他的PayStrategy里内部接口写法什么鬼，感觉好牛逼啊。不过内部类都能写，接口应该当然也能写喽。不过他只是利用接口属性必须都为常量而实现枚举一样作用，不过没有枚举提取出来单独放一个文件好维护，属实自作聪明，一知半解，半瓶水，反被聪明误，傻屌！
        System.out.println(order.pay("JDPAY"));

    }
}

//TODO 教师示范枚举做法代码  tom_vip_20180311_策略模式及模板模式(上)-.mp4